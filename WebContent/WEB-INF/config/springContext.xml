<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
		http://www.springframework.org/schema/jee 
		http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<context:component-scan base-package="com.xdkj.yccb">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
<!-- 		<property name="host" value="smtp.163.com"/> -->
<!-- 		<property name="username" value="avenger0422@163.com"/> -->
<!-- 		<property name="password" value="ll880319ll"/> -->
<!-- 		<property name="javaMailProperties"> -->
<!-- 			<props> -->
<!-- 				<prop key="mail.smtp.auth">true</prop> -->
<!-- 			</props> -->
<!-- 		</property> -->
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760"></property>
	</bean>
	
	<bean id="startAllTimer" class="com.xdkj.yccb.main.readme.quartz.StartAllTimer"></bean>
	<bean id="startJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="startAllTimer"></property>
		<property name="targetMethod" value="startAll"></property>
	</bean>
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="startJob"></property>
<!-- 		<property name="startDelay" value="120000"></property> -->
		<property name="startDelay" value="10000"></property>
		<property name="repeatInterval" value="5000"></property>
		<property name="repeatCount" value="0"></property>
	</bean>
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="simpleTrigger"/>
			</list>
		</property>
	</bean>
<!-- 	<bean id="quartzManager" class="com.xdkj.yccb.main.readme.quartz.QuartzManager"> -->
<!-- 		<property name="sche" ref="schedulerFactoryBean"></property> -->
<!-- 	</bean> -->

	
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/property/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="autoCommitOnClose" value="true" />
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}" />
		<property name="initialPoolSize" value="${cpool.minPoolSize}" />
		<property name="minPoolSize" value="${cpool.minPoolSize}" />
		<property name="maxPoolSize" value="${cpool.maxPoolSize}" />
		<property name="maxIdleTime" value="${cpool.maxIdleTime}" />
		<property name="acquireIncrement" value="${cpool.acquireIncrement}" />
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}" />
	</bean>

	<!-- 配置session工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.xdkj.yccb.entity</value>
				<value>com.xdkj.yccb.*.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- 1. Hibernate 基本属性 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.connection.useUnicode">true</prop>
				<prop key="hibernate.connection.characterEncoding">UTF8</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>

				<!-- 1. Hibernate SQL 调试 -->
				<!-- 在log和console中打印出SQL。 -->
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<!-- Hibernate将在SQL中生成有助于调试的注释信息 -->
				<prop key="hibernate.use_sql_comments">false</prop>

				<!-- 2. Hibernate JDBC和连接(connection)属性 -->
				<!-- Hibernate将收集有助于性能调节的统计数据 -->
				<prop key="hibernate.generate_statistics">true</prop>
				<!-- 允许Hibernate使用JDBC2的批量更新. -->
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<!-- 指定JDBC抓取数量的大小 (调用Statement.setFetchSize()). -->
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<!-- 指定Hibernate在何时释放JDBC连接. -->
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
				<!-- 在JDBC读写binary (二进制)或serializable (可序列化) 的类型时使用流(stream)(系统级属性). -->
				<prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
				<!-- 自动提交 -->
				<prop key="connection.autocommit">false</prop>
			</props>
		</property>
	</bean>
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" 
		/> -->
	<!-- 事务管理配置 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="cancle*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="allServiceMethod"
			expression="execution(* com.xdkj.yccb.main.*.service.*.*(..))" />
		<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice" />
	</aop:config>

</beans>